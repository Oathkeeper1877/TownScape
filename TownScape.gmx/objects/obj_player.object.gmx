<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Char_ForwardIdleBlink</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_light</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize(); //Randomizes game seed
///Initialize Variables
dir = 1.5;
hspd = 0;
vspd = 0;
spd = 2;
delayTime = -1;
//Music
global.MusicRuns = 0;
global.Music = "";

scr_resources(); //Manages Resources

//Player Stats
hpDelay = -1;
stDelay = -1;
nmDelay = -1;

playerHp = 100;
maxPlayerHp = 100;
playerSt = 50;
maxPlayerSt = 50;
playerNm = 100
maxPlayerNm = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Instances

instance_create(x, y, obj_rockSpawn);
instance_create(x, y, obj_treeSpawn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Control

scr_playerPhys();
scr_physCollisions();
scr_playerAnim();



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music
if (room == rm_valley &amp;&amp; global.Morning == true) {
    global.Music = snd_ValleyAir;
}
if (room == rm_valley &amp;&amp; global.Morning == false) {
    global.Music = snd_Roaming;
}



if (global.MusicRuns &lt; 1) {
audio_stop_all();
audio_play_sound(global.Music, 0, true);
global.MusicRuns++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hitting Resources
if (keyboard_check_pressed(ord('E'))) {
if (distance_to_object(obj_tree) &lt; 12  &amp;&amp;  delayTime == -1 || distance_to_object(obj_rock) &lt; 12  &amp;&amp;  delayTime == -1) {
    delayTime = 40;
    }
}

if (delayTime != -1) { //Goes down until it reaches -1
    delayTime -= 1;
}

if (delayTime &gt; 25 &amp;&amp; delayTime &lt;= 40 &amp;&amp; dir == 0.5) { //Facing up, hands up 
    sprite_index = spr_Char_ChopBack;
    image_index = 2;
}
if (delayTime &gt; 25 &amp;&amp; delayTime &lt;= 40 &amp;&amp; dir == 1) { //Facing left, hands up 
    sprite_index = spr_Char_ChopLeft;
    image_index = 2;
}
if (delayTime &gt; 25 &amp;&amp; delayTime &lt;= 40 &amp;&amp; dir == 1.5) { //Facing down, hands up 
    sprite_index = spr_Char_ChopForward;
    image_index = 2;
}
if (delayTime &gt; 25 &amp;&amp; delayTime &lt;= 40 &amp;&amp; dir == 0) { //Facing right, hands up 
    sprite_index = spr_Char_ChopRight;
    image_index = 2;
}

if (delayTime == 25) { //When the player chops, play the hit sound
    audio_play_sound(snd_hitTree, 0, false);
    playerSt -= 15;
}

if (delayTime &gt; -1 &amp;&amp; delayTime &lt;= 25 &amp;&amp; dir == 0.5) { //Facing up, hands down
    sprite_index = spr_Char_ChopBack;
    image_index = 8;
}
if (delayTime &gt; -1 &amp;&amp; delayTime &lt;= 25 &amp;&amp; dir == 1) { //Facing left, hands down
    sprite_index = spr_Char_ChopLeft;
    image_index = 8;
}
if (delayTime &gt; -1 &amp;&amp; delayTime &lt;= 25 &amp;&amp; dir == 1.5) { //Facing down, hands down
    sprite_index = spr_Char_ChopForward;
    image_index = 8;
}
if (delayTime &gt; -1 &amp;&amp; delayTime &lt;= 25 &amp;&amp; dir == 0) { //Facing right, hands down
    sprite_index = spr_Char_ChopRight;
    image_index = 8;
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Stats
//Control
if (playerNm &lt; 0) playerNm = 0;
if (playerNm &gt; maxPlayerNm) playerNm = maxPlayerNm;
if (playerHp &lt; 0) playerHp = 0;
if (playerHp &gt; maxPlayerHp) playerHp = maxPlayerHp;
if (playerSt &lt; 0) playerSt= 0;
if (playerSt &gt; maxPlayerSt) playerSt = maxPlayerSt;



//Nourishment Depletion
if (nmDelay == -1) {
    nmDelay = 80;
    playerNm -= 1;
    } 
if (nmDelay != -1) { 
    nmDelay -= 1;
}


//Health Depletion from Nourishment
if (playerNm &lt;= 0) {
    if (hpDelay == -1) {
        hpDelay = 40;
        playerHp -= 1;
    }
}

if (hpDelay != -1) {
        hpDelay -= 1;
    }

//Healing from full Nourishment


//Stamina Control
if (playerSt &lt; maxPlayerSt) {
     if (stDelay == -1) {
        stDelay = 10;
        playerSt += 1;
    }
}
if (stDelay != -1) {
        stDelay -= 1;
    } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item collection

//Rectangle
draw_set_color(c_black);
draw_set_alpha(0.5);
draw_rectangle(0, 0, 160, 132, false);

//Sprites and Text
draw_set_alpha(1);
draw_set_color(c_white);
draw_set_font(fnt_GUI);
draw_sprite(spr_woodUI, -1, 16, 16);
draw_text(96, 36, global.woodCol);
draw_sprite(spr_rockUI, -1, 16, 48);
draw_text(96, 80, global.rockCol);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Stats
hp = (playerHp / maxPlayerHp) * 100;
st = (playerSt / maxPlayerSt) * 100;
nm = (playerNm / maxPlayerNm) * 100;

draw_healthbar(182, 656, 364, 688, nm, c_black, c_silver, c_blue, 1, true, true);
draw_healthbar(546, 656, 728, 688, hp, c_black, c_silver, c_green, 1, true, true);
draw_healthbar(910, 656, 1092, 688, st, c_black, c_silver, c_yellow, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_sprite_shadow(sprite_index, image_index, x, y, 4, 120, c_black, 0.50); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
