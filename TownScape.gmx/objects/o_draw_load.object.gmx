<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cx=room_width*0.5
cy=room_height*0.5
csize=0
cangle=180
text_on=0
complited=0

p=0
ps=0

t=0
tt=0
t_t=0

cstage=0

surf=-1

text_n=7

symb[0]=  'L'
symb[1]=  'O'
symb[2]=  'A'
symb[3]=  'D'
symb[4]=  'I'
symb[5]=  'N'
symb[6]=  'G'

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// cstage: 
//         0 - start
//         1 - create symb
//         2 - move and loading
//         3 - destroy_sumb
//         4 - move to center
//         5 - end
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_font(f_norm)

spd=30/room_speed

if text_on=1
{
    if !surface_exists(surf)
    surf=surface_create(40*text_n, 100)
    surface_set_target(surf)
    
    draw_clear_alpha(c_white, 0)
    
    for(i=0; i&lt;text_n; i++)
    {
        draw_text_transformed(text_x[i], text_y[i], symb[i], text_scale[i], text_scale[i], 0)
        if cstage=2 text_t[i]+=0.2*spd
        else text_t[i]-=0.2*spd
        text_x[i]=get_sig(0, 20*text_n-text_n*18+i*36+18, min(text_t[i], 1))
        text_scale[i]=max(min(text_t[i], 1), 0)
        text_y[i]=50+cos(current_time/400+text_x[i]/5)*10*min(text_t[i], 1)
    }
    
    surface_reset_target()
    
    draw_surface(surf, room_width*0.5-0.5*surface_get_width(surf), room_height*0.5-surface_get_height(surf)*0.5)
    if text_t[text_n-1]&gt;0.5
        draw_surface_part_ext(surf, 0, 0, (p-ps)/(100-ps)*surface_get_width(surf), 100, room_width*0.5-0.5*surface_get_width(surf), room_height*0.5-surface_get_height(surf)*0.5, 1, 1, c_black, 1)
}

draw_circle(cx, cy, 12*csize, 0)


if cstage=0
{
    t+=0.15*spd
    csize=max(0, min(t, 1)+sin(current_time*0.01)*0.05)
    
    if t&gt;1.5
    {
        cstage=1
        t=0
    }
}
else if cstage=1
{
    t+=0.06*spd
    csize=sin(current_time*0.01)*0.05+1
    cx=get_sig(room_width*0.5, room_width*0.5-text_n*18-25, median(0, 1, t))
    if t&gt;1.2
    {
        cstage=2
        t=0
        text_on=1
        index=0
        for(i=0; i&lt;20; i++)
        {
            text_x[i]=room_width-text_n*18
            text_y[i]=cy
            text_t[i]=-i
            text_sx=cx
            text_scale[i]=0
        }
    }
}
else if cstage=2
{
    csize=sin(current_time*0.01)*0.05+1
    t+=0.1*spd
    if text_t[text_n-1]&gt;0.5 tt+=0.035*spd
    if t_t=0
    {
        cangle=get_sig(180, 360, tt)
    }
    else
    {
        cangle=get_sig(0, 180, tt)
    }
    if tt&gt;1
    {
        tt=0
        t_t=!t_t
    }
    if ps=0 and text_t[text_n-1]&gt;0.2
    {
        ps=p
    }
    cx=lengthdir_x(text_n*18+25, -cangle)+room_width*0.5
    cy=lengthdir_y(text_n*18+25, -cangle)+room_height*0.5
    
    if p&gt;=100 and t_t and tt&gt;=0.95
    {
        cstage=3
        cx=room_width*0.5-text_n*18-25
        cy=room_height*0.5
        for(i=0; i&lt;20; i++)
        {
            text_t[i]=i*0.5+1
        }
    }
}
else if cstage=3
{
    csize=1+sin(current_time*0.01)*0.05
    if text_t[text_n-1]&lt;=0
    {
        text_on=0
        cstage=4
        t=0
    }
}
else if cstage=4
{
    t+=0.05*spd
    csize=sin(current_time*0.01)*0.05+1
    cx=get_sig(room_width*0.5, room_width*0.5-text_n*18-25, median(0, 1, 1-t))
    if t&gt;=1.1
    {
        cstage=5
        t=0
    }
}
else if cstage=5
{
    t+=0.05*spd
    csize=max(0, max(1-t, 0)+sin(current_time*0.01)*0.05*(t&lt;=1))
    if t&gt;=1 complited=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
