<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf=-1
load=1
i=0
j=0
drawer=instance_create(0, 0, o_draw_load)

text_a=1.5
text='Press SPACE to show/hide surface'
draw_s=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// show/hide surface
if keyboard_check_pressed(vk_space) draw_s=!draw_s

// check surface
if !surface_exists(surf) 
{
    surf=surface_create(516, 516)
    surface_set_target(surf)
        draw_clear_alpha(c_black, 1)
    surface_reset_target()
}

// generation
surface_set_target(surf)
time=current_time
if load
while(current_time&lt;time+1)
{
    draw_point_colour(i, j, make_color_rgb(random(255), random(255), random(255)))
    i++
    if i&gt;=surface_get_width(surf)
    {
        i=0
        j++
        
        if j&gt;=surface_get_height(surf)
        {
            load=0
            drawer.p=100
            break
        }
    }
}
surface_reset_target()

// the percentage of generation
if load drawer.p = (i+j*surface_get_width(surf))/(surface_get_width(surf)*surface_get_height(surf))*100

// if generation and animation of loading end
if !load and room=r_loading and drawer.complited
{
    room_goto(r_end)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// drawing surface
if (room=r_loading and draw_s) or room=r_end draw_surface(surf, 20, 20)

// drawing text
draw_set_alpha(text_a)
draw_set_halign(fa_left)
draw_text(10, 20, text)
draw_set_alpha(1)
text_a=max(0, text_a-0.01)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
